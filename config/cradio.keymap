/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        
	combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
	
	combo_bspc {
            timeout-ms = <30>;
            key-positions = <8 9>;
            bindings = <&kp BSPC>;
        };
	
	combo_del {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp DEL>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
          
	combo_lctl {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp LCTL>;
        };
      
        combo_rctl {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp RCTL>;
        };
      
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 						&kp Y &kp U  &kp I    &kp O   &kp P 
		&kp A &kp S &kp D &kp F &kp G 			        	        &kp H &kp J &kp K &kp L &kp QUOT
		&mt LSFT Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp CMMA &kp DOT &mt LSFT RET
          				&mo 2 &mo 1  				&mt RCTL SPC &mt LCTL ENTER 
		>;
		};

       		left_layer {
		bindings = <
		&kp NUM_1  &kp PG_DN    &kp UP    &kp PG_UP    &kp NUM_5		&kp PLUS &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp FSLH 
		&kp TAB    &kp LEFT    &kp DOWN      &kp RIGHT     &kp HASH 		&kp MINUS &kp NUM_4  &kp NUM_5 &kp NUM_6  &kp BSLH 
		&kp LSFT    &kp TILDE 	&kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2 	&kp EQUAL &kp NUM_1 &kp NUM_2 &kp NUM_3  &mt LSFT SCLN 
					    &mo 3  &mo 1  					&kp NUM_0 &kp RGUI 
		>;
		};
		
		right_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CAPS  &kp F7 &kp F8 &kp F9 &kp F12 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp F4  &kp F5  &kp F6   &kp DQT
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp F1 &kp F2 &kp F3  &mt LSFT QMARK
					  &kp LCTL &mo 3  					&kp SPC  &mo 2 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp LCTL  &kp LALT    &kp DEL    &kp NUM_4    &kp NUM_5 		&trans &trans   &trans   &trans  &trans
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  					&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5 	&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};
