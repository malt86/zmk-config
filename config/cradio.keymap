/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
// #include <combos.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define XXX &none
#define ___ &trans

#define SK(KEY) &nk KEY KEY
#define MO(LAYER) &mo_tap LAYER F24

// Keep sticky keys active for a long time so they effectively do not time out
#define STICKY_KEY_TIMEOUT 60000

#define BASE 0
#define NAV_L 1
#define BT_L 2
#define WIN_L 3
#define W_NAV_L 4
#define GAME 5
#define FUN_L 6

// #define NUM_L 4
// #define SYM_L 5
// #define MED_L 6
// #define MEH_L 8

//	0	1	2	3	4		5	6	7	8	9 
//	10	11	12	13	14		15	16	17	18	19
//	20	21	22	23	24		25	26	27	28	29
//				30	31		32	33
// 		>;

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
	&lt { quick_tap_ms = <200>; }; 
/ {

	combos {
		#include "combos.dtsi"
	};

    behaviors {
	sh: shift {
		compatible = "zmk,behavior-hold-tap";
 		label = "shift mod";
 		#binding-cells = <2>;
 		tapping_term_ms = <150>;
 		flavor = "hold-preferred";
 		bindings = <&kp>, <&kp>;
	};
	hm: homerow_mods {
		compatible = "zmk,behavior-hold-tap";
		label = "homerow mods";
		#binding-cells = <2>;
		tapping_term_ms = <150>;
		flavor = "tap-preferred";
		bindings = <&kp>, <&kp>;
	};

	skq: sticky_key_quick_release {
		compatible = "zmk,behavior-sticky-key";
		label = "STICKY_KEY_QUICK_RELEASE";
		#binding-cells = <1>;
		bindings = <&kp>;
		quick-release;
		release-after-ms = <STICKY_KEY_TIMEOUT>;
	};
    };


	keymap {
		compatible = "zmk,keymap";
      
	default_layer {
	    label = "Felix";
	    bindings = <
	&kp Q		&kp W		&kp E		&kp R		&kp T				&kp Y		&kp U	&kp I		&kp O		&kp P
	&kp A		&kp S		&kp D		&kp F		&kp G				&kp H		&kp J	&kp K		&kp L		&kp QUOT
	&sh LSFT Z	&hm LCTRL X	&kp C		&kp V		&kp B				&kp N		&kp M	&hm LGUI COMMA	&hm LCTRL DOT	&sh RSFT FSLH 
							&lt NAV_L ESC	&hm LGUI BSPC			&kp SPACE	&sh RSFT RET			
	>;
	};		
	
	
	nav_layer {
	    label = "Nav";
	    bindings = <
	&kp LS(TAB) 	&kp LA(BSPC)		&kp UP		&kp LA(DEL) 	&kp TAB			&kp LA(LG(ESC))	&kp LBRC	&kp RBRC 	&kp PIPE	&kp BSLH
	&kp LA(LEFT)	&kp LEFT		&kp DOWN	&kp RIGHT	&kp LA(RIGHT)		&none		&kp LG(Z)	&kp LS(LG(Z))	&kp COLON	&kp SEMI 
	&sh LSFT HOME 	&hm LCTRL LG(LEFT)	&hm LGUI RET	&kp LG(RIGHT)	&kp END			&none		&none		&hm RGUI MINUS	&hm RCTRL EQL	&sh RSFT FSLH 
								&to BASE	&trans			&trans		&trans				
	    >;
	};

	bt_layer {
	    label = "Bluetooth";
	    bindings = <
	&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4	&trans		&out OUT_USB	&trans		&trans		&reset	
	&trans		&trans		&trans		&kp LC(LA(DEL))	&bt BT_PRV	&bt BT_NXT	&trans		&trans		&trans		&kp LC(LA(DEL))
	&bt BT_CLR	&trans		&trans		&trans		&out OUT_BLE	&trans		&trans		&trans		&trans		&bootloader
							&trans		&to GAME		&trans	&trans				
	    >;
	};

	windows_layer {
	    label = "Windows";
	    bindings = <
	&kp Q		&kp W		&kp E		&kp R		&kp T			&kp Y		&kp U		&kp I		&kp O		&kp P
	&kp A		&kp S		&kp D		&kp F		&kp G			&kp H		&kp J		&kp K		&kp L		&kp QUOT
	&sh LSFT Z	&hm LCTRL X	&hm LALT C	&hm LALT V	&kp B			&kp N		&kp M		&hm RALT COMMA	&hm RCTRL DOT	&sh RSFT FSLH
							&mo W_NAV_L	&hm LCTRL BKSP		&kp SPACE	&sh LALT RET			
		    >;

	};

	windows_nav_layer {
	    label = "Win Nav";
	    bindings = <
	&kp LS(TAB) 		&kp LC(BSPC)	&kp UP		&kp LC(DEL) 	&kp TAB			&none	&kp LBRC	&kp RBRC 	&kp PIPE	&kp BSLH
	&kp LC(LEFT)		&kp LEFT	&kp DOWN	&kp RIGHT	&kp LC(RIGHT)		&none	&kp LC(Z)	&kp LS(LC(Z))	&kp COLON	&kp SEMI 
	&sh LSFT LC(HOME)	&hm LCTRL HOME 	&hm LALT RET	&kp END		&kp LC(END)		&none	&none		&hm RALT MINUS	&hm RCTRL EQL	&kp FSLH 
								&to BASE	&trans			&trans	&trans				
	    >;
	};

	games_layer {
	label = "Games";
	    bindings = <
	&kp Q		&kp W		&kp E		&kp R		&kp T			&kp Y		&kp U		&kp I		&kp O		&kp P
	&kp A		&kp S		&kp D		&kp F		&kp G			&kp H		&kp J		&kp K		&kp L		&kp QUOT
	&kp LSFT	&kp X		&kp C		&kp V		&kp B			&kp N		&kp M		&hm RALT COMMA	&hm RCTRL DOT	&sh RSFT FSLH
							&kp LCTRL	&kp BKSP		&kp SPACE	&sh LALT RET			
	>;
	};

	
	fun_layer {
	    label = "Fuctions";
	    bindings = <
		&kp F1	&kp F2		&kp F3  	&kp F4	&kp F5	&kp F6	&kp F7	&kp F8	&kp F9	&kp F10		
		&kp F11	&kp F12		&trans		&trans	&trans	&trans	&trans	&trans	&trans	&trans
		&kp SLCK &kp PSCRN	&kp PAUSE_BREAK &trans	&trans	&trans	&trans	&trans	&trans	&trans
							&to BASE	&none	&none	&none	
	    >;
	};
	// media_layer {
	//     label = "Media";
	//     bindings = <
	// &trans	&trans	&trans	&trans	&trans		&trans		&trans		&trans		&trans		&trans
	// &trans	&trans	&trans	&trans	&trans		&trans		&kp C_PREV	&kp C_VOL_DN	&kp C_VOL_UP	&kp C_NEXT
	// &trans	&trans	&trans	&trans	&trans		&trans		&trans		&trans		&trans		&trans
	// 			&trans	&trans		&kp C_STOP	&kp C_PLAY_PAUSE 				
	//     >;
	// };

	// meh_layer {
	//     label = "MEH";
	//     bindings = <
	    			
	// 	&kp LC(LS(LA(Q)))	&kp LC(LS(LA(W)))	&kp LC(LS(LA(E)))	&kp LC(LS(LA(R)))	&kp LC(LS(LA(T)))	&kp F6	&kp F7	&kp F8	&kp F9	&kp F10		
	// 	&kp LC(LS(LA(A)))	&kp LC(LS(LA(S)))	&kp LC(LS(LA(D)))	&kp LC(LS(LA(F)))	&kp LC(LS(LA(G)))	&trans	&trans	&trans	&trans	&trans
	// 	&kp LC(LS(LA(Z)))	&kp LC(LS(LA(X)))	&kp LC(LS(LA(C)))	&kp LC(LS(LA(V)))	&kp LC(LS(LA(B)))	&trans	&trans	&trans	&trans	&trans
	// 						&tog 8	&to 8 &none	&none	
	//     >;
	// };
	
	};
};
